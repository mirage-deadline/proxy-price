// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package binance

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4086215fDecodeGithubComMirageDeadlineVaultPriceListenerInternalProvidersBinance(in *jlexer.Lexer, out *markPriceMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.EventType = string(in.String())
		case "E":
			out.EventTime = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "p":
			out.MarkPrice = string(in.String())
		case "i":
			out.IndexPrice = string(in.String())
		case "P":
			out.EstimatedSettlePrice = string(in.String())
		case "r":
			out.FundingRate = string(in.String())
		case "T":
			out.NextFundingTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeGithubComMirageDeadlineVaultPriceListenerInternalProvidersBinance(out *jwriter.Writer, in markPriceMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.EventTime))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.MarkPrice))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.String(string(in.IndexPrice))
	}
	{
		const prefix string = ",\"P\":"
		out.RawString(prefix)
		out.String(string(in.EstimatedSettlePrice))
	}
	{
		const prefix string = ",\"r\":"
		out.RawString(prefix)
		out.String(string(in.FundingRate))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.NextFundingTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v markPriceMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeGithubComMirageDeadlineVaultPriceListenerInternalProvidersBinance(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v markPriceMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeGithubComMirageDeadlineVaultPriceListenerInternalProvidersBinance(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *markPriceMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeGithubComMirageDeadlineVaultPriceListenerInternalProvidersBinance(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *markPriceMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeGithubComMirageDeadlineVaultPriceListenerInternalProvidersBinance(l, v)
}
func easyjson4086215fDecodeGithubComMirageDeadlineVaultPriceListenerInternalProvidersBinance1(in *jlexer.Lexer, out *binanceMarkPriceMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stream":
			out.Stream = string(in.String())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeGithubComMirageDeadlineVaultPriceListenerInternalProvidersBinance1(out *jwriter.Writer, in binanceMarkPriceMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stream\":"
		out.RawString(prefix[1:])
		out.String(string(in.Stream))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v binanceMarkPriceMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeGithubComMirageDeadlineVaultPriceListenerInternalProvidersBinance1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v binanceMarkPriceMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeGithubComMirageDeadlineVaultPriceListenerInternalProvidersBinance1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *binanceMarkPriceMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeGithubComMirageDeadlineVaultPriceListenerInternalProvidersBinance1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *binanceMarkPriceMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeGithubComMirageDeadlineVaultPriceListenerInternalProvidersBinance1(l, v)
}
